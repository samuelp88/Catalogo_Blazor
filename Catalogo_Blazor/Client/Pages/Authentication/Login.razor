@page "/login"
@inject HttpClient http
@inject NavigationManager navigation
@inject TokenAuthenticationProvider authStateProvider


<div class="container col-6">
	<Warning Exibir="loginFalhou">
		<h5>@Mensagem</h5>
	</Warning>
	<div class=card-body>
		<h5 class="card-title">Login</h5>
		<EditForm Model="userInfo" OnValidSubmit="FazerLogin">
			<DataAnnotationsValidator />
			<div class="mb-3">
				<label>Email</label>
				<InputText class="form-control" @bind-Value="userInfo.Email" />
				<ValidationMessage For="@(() => userInfo.Email)" />
			</div>
			<div class="mb-3">
				<label>Password</label>
				<InputText type="password" class="form-control" @bind-Value="userInfo.Password" />
				<ValidationMessage For="@(() => userInfo.Password)" />
			</div>
			<button type="submit" class="btn btn-outline-primary btn-sm">Login</button>
		</EditForm>
	</div>
</div>




@code {
	private UserInfo userInfo = new UserInfo();
	bool loginFalhou = false;

	[Parameter]
	public string Mensagem { get; set; }

	async Task FazerLogin()
	{
		//var result = await http.PostAsJsonAsync("api/account/login", userInfo);
		var loginAsJson = JsonSerializer.Serialize(userInfo);

		var httpResponse = await http.PostAsync("api/account/login",
				new StringContent(loginAsJson, Encoding.UTF8, "application/json"));

		try
		{
			if (httpResponse.IsSuccessStatusCode)
			{
				var resposeAsString = await httpResponse.Content.ReadAsStringAsync();
				var loginResult = JsonSerializer.Deserialize<UserToken>(resposeAsString,
					new JsonSerializerOptions
						{
							PropertyNameCaseInsensitive = true
						});

				await authStateProvider.Login(loginResult.Token);
				navigation.NavigateTo("/");
			}
			else
			{
				loginFalhou = true;
				Mensagem = $"Não foi possivel realizar o Login do usuário. (Erro: {httpResponse.StatusCode})";
			}
		}
		catch (Exception e)
		{
			loginFalhou = true;
			Mensagem = $"Não foi possivel realizar o Login do usuário. (Erro: 500)";
		}
	}
}
